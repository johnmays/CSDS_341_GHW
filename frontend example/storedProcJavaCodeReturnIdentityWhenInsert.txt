This code file explains how to create a table in SQL Server, write a stored procedure to
insert a row into this table and return its automatically generated primary key, execute the 
stored procedure within SSMS to make certain it runs correctly, and run
Java front end code to prompt a user for information to insert into this table. The 
generated primary key is returned and displayed via the Java front end code.

High level overview of this code file.

First, create a table called deptID within SQL Server using SSMS. 
This table contains the column id that is automatically generated with IDENTITY(1,1).
It also contains the tstamp column that is automatcally generated using the GETDATE() function;
this will be the date and time that the row is inserted. 

Second, create the stored procedure called insertDeptID that the Java code will call.

Third, test your stored procedure within SSMS to make certain it works as expected.

Fourth, create the Java code. 

For more information about please read https://learn.microsoft.com/en-us/sql/connect/jdbc/using-a-stored-procedure-with-output-parameters?view=sql-server-ver16


--------------------------------------
--create table in SSMS with the following code
USE University;
GO

create TABLE deptID (
	id int IDENTITY(1,1) NOT NULL,
	dept_name varchar(20) NOT NULL,
	building varchar(15) NULL,
	budget numeric (12, 2) NULL,
	tstamp datetime default GETDATE() NOT NULL,
    PRIMARY KEY (id),
    UNIQUE(dept_name)
)
GO
-----------------------------------
--create a stored procedure to insert into the deptID table. NOtice,
--the output parameter @id that we will use within out Java code to
--get the newly created primary key for the table. 
-- Run this code in SSMS

create procedure insertDeptID 
       @dept_name  varchar(20), 
       @building  varchar(15),
       @budget  numeric(12,2),
       @id int output
as 
begin
   insert into deptID (dept_name, building, budget)
       values (@dept_name, @building, @budget);

   select @id = SCOPE_IDENTITY();
   
 end
------------------------------------------

--Test your stored procedure within SSMS by executing the following code
begin
  declare @idd as int;
  exec insertDeptID 'Hello5', 'Dept2', 124000, @idd output;
  select @idd;
end;

select * from deptid;

----------------------------------------
//Java code to run the stored procedure and output the 
//generated identity for the id column in the newly created table deptID

//For more information read 
// https://learn.microsoft.com/en-us/sql/connect/jdbc/using-a-stored-procedure-with-output-parameters?view=sql-server-ver16

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner; 

public class SQLStoredProcInsertDeptID {
    // Connect to your database.
    // Replace server name, username, and password with your credentials
    public static void main(String[] args) {
        String connectionUrl = 
        "jdbc:sqlserver://localhost;"
                + "database=university;"
                + "user=dbuser;"
                + "password=ChangeThisOrUseConfigFile;"
                + "encrypt=true;"
                + "trustServerCertificate=true;"
                + "loginTimeout=30;";
        Scanner myObj = new Scanner(System.in);
        String inpDeptName, inpBuilding;
        float inpBudget;

       System.out.println("Enter dept_name then enter. "); 
       inpDeptName = myObj.nextLine();   
       System.out.println("Enter building then enter.");
       inpBuilding = myObj.nextLine();
       System.out.println("Enter budget as numeric (12,2) then enter. "); 
       inpBudget = myObj.nextFloat();
       myObj.close();

       System.out.println("dept_name: " + inpDeptName + "  building: " 
             + inpBuilding + "   budget: " + inpBudget);
        
        // 4 ? because 4 parameters to stored proc needed. Index for paramters start at 1.
        String callStoredProc = "{call dbo.insertDeptID(?,?,?,?)}"; 
   
        try (Connection connection = DriverManager.getConnection(connectionUrl);
                CallableStatement prepsStoredProc = connection.prepareCall(callStoredProc);) 
        {
            // 4 parameters to stored proc start with a parameter index of 1
            prepsStoredProc.setString(1, inpDeptName); 
            prepsStoredProc.setString(2, inpBuilding);
            prepsStoredProc.setFloat(3, inpBudget);
            //the 4th parameter is an output parameter
            prepsStoredProc.registerOutParameter(4, java.sql.Types.INTEGER) ;
            prepsStoredProc.execute();
           
            System.out.println("Generated Identity: " + prepsStoredProc.getInt(4));
        }
        // Handle any errors that may have occurred.
        catch (SQLException e) {
            e.printStackTrace();
        }
    }  
}

